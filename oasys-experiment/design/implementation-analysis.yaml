analysis:
  overview: |
    The Graphを使用してOasysのHubLayer MainnetにおけるL1StandardBridgeのデポジットイベントを
    追跡・集計するシステムの実装

  components:
    schema:
      file: schema.graphql
      description: |
        データモデルを定義するGraphQLスキーマ
      entities:
        BridgeDeposit:
          purpose: 個々のデポジットイベントを記録
          key_features:
            - トランザクションハッシュとログインデックスで一意に識別
            - verse名による分類
            - 送信元・送信先アドレスの記録
            - 金額とタイムスタンプの保持
            - 日次統計との関連付け

        DailyBridgeStats:
          purpose: 日次のデポジット統計を集計
          key_features:
            - verse名と日付で一意に識別
            - その日の総デポジット量を記録
            - デポジット回数のカウント
            - 関連するデポジットイベントへの逆参照

    subgraph_config:
      file: subgraph.yaml
      description: |
        The Graphのデータソースとマッピング設定
      key_points:
        - 複数のL1StandardBridgeコントラクトを個別のデータソースとして定義
        - 各verseごとに同じイベントハンドラーを使用
        - AssemblyScriptによるマッピング処理の指定

    event_handlers:
      file: mapping.ts
      description: |
        イベントデータの処理とエンティティの作成ロジック
      functions:
        getVerseName:
          purpose: コントラクトアドレスからverse名を解決
          logic: |
            - Saakuru、TCGverseのアドレスを静的に定義
            - 未知のアドレスは"Unknown"として処理

        getDailyStatsId:
          purpose: 日次統計のユニークID生成
          logic: |
            - タイムスタンプをUTC日付に変換
            - "verse名-YYYY-MM-DD"形式のIDを生成

        handleETHDepositInitiated:
          purpose: デポジットイベントの処理
          steps:
            1. verse名とID情報の生成
            2. 日次統計エンティティの取得または作成
            3. 統計データの更新（総額と回数）
            4. 個別デポジットイベントの保存

  data_flow:
    1. イベント検知:
       - L1StandardBridgeコントラクトからETHDepositInitiatedイベントを検知
       - verse別に設定されたデータソースで並行処理

    2. データ処理:
       - イベントデータをBridgeDepositエンティティとして保存
       - 日次統計を自動的に更新
       - verse別に集計を管理

    3. クエリ提供:
       - 期間指定での統計データ取得
       - verse別の最新デポジット情報
       - 日次のデポジット統計

  特徴的な実装:
    1. 階層的データモデル:
       - 個別イベントと集計データの関連付け
       - @derivedFrom による効率的な逆参照

    2. 柔軟な集計機能:
       - 日次での自動集計
       - verse別の統計分離

    3. エラー対策:
       - 未知のverseへの対応
       - 初回集計時のデータ初期化

  改善可能点:
    1. スケーラビリティ:
       - 新しいverseの追加方法の整備
       - コントラクトアドレスの設定管理

    2. 機能拡張:
       - 月次/年次集計の追加
       - 金額範囲での検索機能

    3. 監視・デバッグ:
       - エラーイベントの記録
       - 異常値の検知機能 